% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kmFit_eQTL.R
\name{kmFit_eQTL}
\alias{kmFit_eQTL}
\title{eQTL linear mixed effects models with kinship}
\usage{
kmFit_eQTL(
  dat.snp = NULL,
  within.gene = FALSE,
  geneID = "gene",
  genotypeID = "snpID",
  dat = NULL,
  kin = NULL,
  patientID = "ptID",
  libraryID = "libID",
  counts = NULL,
  meta = NULL,
  genes = NULL,
  weights = NULL,
  subset.var = NULL,
  subset.lvl = NULL,
  subset.genes = NULL,
  model,
  use.weights = FALSE,
  run.lm = FALSE,
  run.lme = FALSE,
  run.lmerel = FALSE,
  metrics = FALSE,
  run.lmekin = NULL,
  run.contrast = FALSE,
  contrast.var = NULL,
  processors = NULL,
  p.method = "BH"
)
}
\arguments{
\item{dat.snp}{Data frame containing numeric (0,1,2) genotypes. Rows are SNP and columns are donors. Option column matching SNP to genes of interest (see within.gene).}

\item{within.gene}{Logical if should only run paired SNP and genes in rows of dat.snp. Default is FALSE. Does NOT work in combination with subset.genes}

\item{geneID}{Character variable name to match dat.snp dat with gene identifiers. Values should match rownames in express data (dat$E or counts) Default it "gene"}

\item{genotypeID}{Character variable name to match dat.snp dat with SNP identifiers. Default it "snpID"

Same as kmFit( )}

\item{dat}{EList object output by voom( ). Contains counts (dat$E), meta (dat$targets), and genes (dat$genes).}

\item{kin}{Matrix with pairwise kinship values between individuals. Must be numeric with rownames.}

\item{patientID}{Character of variable name to match dat$targets to kinship row and column names.}

\item{libraryID}{Character of variable name to match dat$targets to dat$E colnames}

\item{counts}{Matrix of normalized expression. Rows are genes, columns are libraries.}

\item{meta}{Matrix or data frame of sample and individual metadata.}

\item{genes}{Matrix or data frame of gene metadata.}

\item{weights}{Matrix of data frame of gene specific weights. Usually calculated with limma::voomWithQualityWeights().}

\item{subset.var}{Character list of variable name(s) to filter data by.}

\item{subset.lvl}{Character list of variable value(s) or level(s) to filter data to. Must match order of subset.var}

\item{subset.genes}{Character vector of genes to include in models.}

\item{model}{Character vector of model starting with ~ Should include (1|patientID) if mixed effects will be run}

\item{use.weights}{Logical if gene specific weights should be used in model. Default is FALSE}

\item{run.lm}{Logical if should run lm model without kinship}

\item{run.lme}{Logical if should run lme model without kinship}

\item{run.lmerel}{Logical if should run lmerel model with kinship}

\item{metrics}{Logical if should calculate model fit metrics such as AIC, BIC, R-squared. Default is FALSE}

\item{run.lmekin}{Depreciated. Please use run.lmerel}

\item{run.contrast}{Logical if should run pairwise contrasts. If no matrix provided, all possible pairwise comparisons are completed.}

\item{contrast.var}{Character vector of variable in model to run contrasts of. Interaction terms must be specified as "var1:var2". If NULL (default), all contrasts for all variables in the model are run}

\item{processors}{Numeric processors to run in parallel. Default is 2 less than the total available}

\item{p.method}{Character of FDR adjustment method. Values as in p.adjust( )}
}
\value{
List of data frames including
   - lm/lme/lmerel: model estimates and significance
   - *.contrast: model estimates and significance for pairwise contrasts with variables in the original model
   - *.fit: model fit metrics such as sigma, AIC, BIC, R-squared (optional with metrics paramater)
   - *.error: error messages for genes that failed model fitting
}
\description{
Run lmerel and corresponding lm or lme without kinship of gene expression in RNA-seq data against associated genotypes
}
\examples{
#Determine data size
nSNP <- 4
nSamp <- length(unique(example.voom$targets$ptID))
#Create random genotype data
snp <- data.frame(matrix(sample(c(0,1,2), nSNP*nSamp, replace=TRUE),
                         nrow=nSNP)) \%>\%
  #Add SNP and gene names
  dplyr::mutate(snpID = paste0("rs",1:nSNP),
                gene = rep(example.voom$genes$geneName[1:2], nSNP/2)) \%>\%
 dplyr::select(snpID, gene, dplyr::everything())
 colnames(snp) <- c("snpID", "gene", unique(example.voom$targets$ptID))

eQTL_result <- kmFit_eQTL(dat.snp = snp,
                          dat = example.voom, kin = example.kin,
                          run.lmerel = TRUE, run.contrast = TRUE, metrics=TRUE,
                          subset.genes = c("ENSG00000250479","CENSG00000250510"),
                          model = "~ virus*genotype + (1|ptID)")

eQTL_result2 <- kmFit_eQTL(dat.snp = snp, within.gene = TRUE,
                           dat = example.voom, kin = example.kin,
                           run.lmerel = TRUE, run.contrast = TRUE, metrics=TRUE,
                           model = "~ virus*genotype + (1|ptID)")
}
